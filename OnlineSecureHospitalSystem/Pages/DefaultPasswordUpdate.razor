@page "/default-password-update"
@using OnlineSecureHospitalSystem.Data.DTO
@using OnlineSecureHospitalSystem.Data.Models
@using OnlineSecureHospitalSystem.Services.Authentication
@using OnlineSecureHospitalSystem.Services.Authorization
@using System.ComponentModel.DataAnnotations
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject AuthorizationService AuthorizationService
@inject AccessControlService AccessControl
@inject ISnackbar Snackbar

<div class="d-flex justify-center align-center" style="min-height: 100vh;">
    <MudPaper Class="pa-6 mx-4" Style="width: 100%; max-width: 500px;" Elevation="4">
        <div class="d-flex flex-column align-center mb-4">
            <MudIcon Icon="Icons.Material.Filled.Security" Size="Size.Large" Color="Color.Primary" Class="mb-2" />
            <MudText Typo="Typo.h4" Class="mb-2" Style="text-align: center;">
                Update Default Password
            </MudText>
            <MudText Typo="Typo.body1" Style="text-align: center; color: #666;">
                Please create a new password for your account.
            </MudText>
        </div>
        <EditForm Model="passwordDto" OnValidSubmit="UpdatePassword">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="passwordDto.NewPassword"
                          Label="New Password"
                          InputType="InputType.Password"
                          Required="true"
                          For="@(() => passwordDto.NewPassword)"
                          Class="mb-4" />

            <MudTextField @bind-Value="passwordDto.ConfirmPassword"
                          Label="Confirm New Password"
                          InputType="InputType.Password"
                          Required="true"
                          For="@(() => passwordDto.ConfirmPassword)"
                          Class="mb-4" />
            <MudCard Class="mb-4" Style="background-color: #f8f9fa;">
                <MudCardContent Class="pa-4">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">
                        Password Requirements:
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mb-1">
                        • At least 8 characters
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mb-1">
                        • At least one uppercase letter
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mb-1">
                        • At least one lowercase letter
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mb-1">
                        • At least one number
                    </MudText>
                </MudCardContent>
            </MudCard>
            <div class="d-flex justify-center mt-4">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Disabled="@(!IsFormValid())">
                    Update Password
                </MudButton>
            </div>
        </EditForm>
    </MudPaper>
</div>

@code {
    private UpdatePasswordDTO passwordDto = new();

    protected override async Task OnInitializedAsync()
    {
        await AccessControl.CheckAccessAsync(requireDefaultPasswordUpdated: false, allowedRoles: null!);

        if (AuthorizationService.CurrentUser?.IsDefaultPassword != 1)
        {
            NavigationManager.NavigateTo("/unauthorized");
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrEmpty(passwordDto.NewPassword) &&
               passwordDto.NewPassword == passwordDto.ConfirmPassword &&
               passwordDto.NewPassword.Length >= 8 &&
               HasUpperCase(passwordDto.NewPassword) &&
               HasLowerCase(passwordDto.NewPassword) &&
               HasNumber(passwordDto.NewPassword);
    }

    private bool HasUpperCase(string? password) =>
        !string.IsNullOrEmpty(password) && password.Any(char.IsUpper);

    private bool HasLowerCase(string? password) =>
        !string.IsNullOrEmpty(password) && password.Any(char.IsLower);

    private bool HasNumber(string? password) =>
        !string.IsNullOrEmpty(password) && password.Any(char.IsDigit);

    private async Task UpdatePassword()
    {
        try
        {
            await AuthorizationService.LoadUserAsync();
            var currentUser = AuthorizationService.CurrentUser;

            if (currentUser == null)
            {
                Snackbar.Add("Session expired. Please login again.", Severity.Error);
                NavigationManager.NavigateTo("/");
                return;
            }

            var success = await AuthenticationService.UpdatePasswordAsync(
                currentUser.User_ID,
                passwordDto.NewPassword);

            if (success)
            {
                Snackbar.Add("Password updated successfully!", Severity.Success);

                currentUser.IsDefaultPassword = 0;
                await AuthorizationService.SetUserAsync(currentUser);

                await Task.Delay(1500);
                NavigationManager.NavigateTo("/home");
            }
            else
            {
                Snackbar.Add("Failed to update password.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }
}